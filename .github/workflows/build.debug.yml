name: Build and Package [Debug] [master]

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Typically: Debug | Release - this value must be setup in the .sproj file that is being built
  BUILD_CONFIGURATION: Debug
  # Build and Package output files are read from this root
  PROJECT_BIN: src/Plaid/bin
  PROJECT_MAIN: src/Plaid/Plaid.csproj
  PROJECT_TESTS: tests/Plaid.MSTest/Plaid.MSTest.csproj
  PROJECT_URL: https://github.com/${{ github.repository }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  NUGET_SOURCE: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

jobs:
  
  env-setup:
    runs-on: windows-latest
    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.1
      - name: Setup .NET Core v3.1
        uses: actions/setup-dotnet@v1.6.0
        with:
          dotnet-version: 3.1.x
          
  build:
    needs: [env-setup]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Update Project Metadata
        run: |
          [xml]$xml = Get-Content $env:PROJECT_MAIN
          #
          # Set Company to REPOR_OWNER so that forks have a unique Company name
          $xml.SelectNodes("//PropertyGroup/Company") | % { $_."#text" = $env:REPO_OWNER }
          echo "Company: $($env:REPO_OWNER)"
          #
          # Set Repository Url so that source debugging points back to the right git repo
          $xml.SelectNodes("//PropertyGroup/RepositoryUrl") | % { $_."#text" = $env:REPO_URL }
          echo "RepositoryUrl: $($env:REPO_URL)"
          #
          # Set Project Url so that it's clear in NuGet properties this is either the root or a fork
          $xml.SelectNodes("//PropertyGroup/PackageProjectUrl") | % { $_."#text" = $env:PROJECT_URL }
          echo "PackageProjectUrl: $($env:PROJECT_URL)"
          # 
          # Save Updated .csproj File
          $xml.Save($env:PROJECT_MAIN)
          $projectName = "$($env:GITHUB_REPOSITORY)".Split('/',2)[1]
          #
          # TODO: the project name in csproj is not set to the same as the GitHub name so overriding this manually...
          #
          $projectName = "Going.Plaid"
          echo "::set-env name=PROJECT_NAME::$($projectName)"
      - name: Build
        run: dotnet build --configuration $env:BUILD_CONFIGURATION $env:PROJECT_MAIN
      - name: Upload Build Output Artifact
        uses: actions/upload-artifact@v2.1.3
        with:
          # Artifact name
          name: ${{ env.PROJECT_NAME }}.${{ env.BUILD_CONFIGURATION }}
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{ env.PROJECT_BIN }}/${{ env.BUILD_CONFIGURATION }}/netstandard2.0/**/*
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
#
# Cannot enable Tests as it requires a secrets.json file which should not be checked into source control
#      - name: Test
#        run: dotnet test --configuration $env:BUILD_CONFIGURATION --verbosity normal $env:PROJECT_TESTS
#
      - name: Package
        run: |
          dotnet pack --include-source --include-symbols --configuration $env:BUILD_CONFIGURATION $env:PROJECT_MAIN --verbosity normal
          $nupkg = (Get-ChildItem $env:PROJECT_BIN/$env:BUILD_CONFIGURATION/*.nupkg).FullName
          echo "::set-env name=NUGET_PACKAGE::$($nupkg)"
      - name: Upload NuGet Package Artifact
        uses: actions/upload-artifact@v2.1.3
        with:
          # Artifact name
          name: ${{ env.PROJECT_NAME }}.${{ env.BUILD_CONFIGURATION }}.NuGet
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{ env.PROJECT_BIN }}/${{ env.BUILD_CONFIGURATION }}/*.nupkg
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
      - name: Publish to Github Packages
# NOTE: *.nupkg does not work when pushing
        run: |
          dotnet nuget add source ${{ env.NUGET_SOURCE }} -n github -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push ${{ env.NUGET_PACKAGE }} --source "github" --skip-duplicate
